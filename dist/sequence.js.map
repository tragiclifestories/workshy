{"version":3,"sources":["sequence.js"],"names":[],"mappings":";;;;;;;;;;;;oBAAoB,QAAQ;;;;IAEtB,QAAQ;AACC,aADT,QAAQ,CACE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;8BAD7B,QAAQ;;AAEN,YAAI,CAAC,UAAU,GAAG,GAAG,CAAC;AACtB,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAClB,YAAI,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACvC;;iBALC,QAAQ;aAMT,MAAM,CAAC,QAAQ;eAAC,iBAAG;AAChB,mBAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SAClD;;;eACG,cAAC,CAAC,EAAE;AACJ,mBAAO,IAAI,QAAQ,oBAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SAC3C;;;eACM,mBAAG;AACN,gBAAI,MAAM,GAAG,EAAE,CAAC;;;;;;AAChB,qCAAgB,IAAI;wBAAX,GAAG;AAAU,0BAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAAA;;;;;;;;;;;;;;;;AACvC,mBAAO,MAAM,CAAC;SACjB;;;WAhBC,QAAQ;;;qBAmBC,QAAQ","file":"sequence.js","sourcesContent":["import takeGen from './take';\n\nclass Sequence {\n    constructor(gen, args, parent) {\n        this._generator = gen;\n        this._args = args;\n        if (parent) this._args.push(parent);\n    }\n    [Symbol.iterator]() {\n        return this._generator.apply(this, this._args);\n    }\n    take(n) {\n        return new Sequence(takeGen, [n], this);\n    }\n    toArray() {\n        let result = [];\n        for (let val of this) result.push(val);\n        return result;\n    }\n}\n\nexport default Sequence;"],"sourceRoot":"/source/"}