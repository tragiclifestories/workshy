{"version":3,"sources":["generators.js"],"names":[],"mappings":";;;;;qBAAe;AACX,SAAK,0BAAE,eAAW,CAAC,EAAE,QAAQ;YAErB,YAAY,kFACP,GAAG;;;;;AAFZ,wBAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACnB,gCAAY,GAAG,EAAE;;;;;gCACL,QAAQ;;;;;;;;AAAf,uBAAG;;0BACJ,YAAY,CAAC,MAAM,GAAG,CAAC,CAAA;;;;;AAAE,gCAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;;;;2BAE1C,YAAY;;;AAClB,gCAAY,GAAG,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAGpB,YAAY;;;;;;;KACrB,CAAA;;AAED,QAAI,0BAAE,cAAW,CAAC,EAAE,QAAQ;YACpB,CAAC,uFAEI,GAAG;;;;;AAFR,qBAAC,GAAG,CAAC;;0BACL,CAAC,KAAK,CAAC,CAAA;;;;;;;;;;;;iCACK,QAAQ;;;;;;;;AAAf,uBAAG;;2BACF,GAAG;;;0BACL,CAAC,IAAI,EAAE,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAEnB,CAAA;;AAED,QAAI,0BAAE,cAAW,CAAC,EAAE,QAAQ;YACpB,CAAC,uFACI,GAAG;;;;;AADR,qBAAC,GAAG,CAAC;;;;;iCACO,QAAQ;;;;;;;;AAAf,uBAAG;;0BACJ,CAAC,IAAI,CAAC,EAAE,CAAA;;;;;;2BAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAE9B,CAAA;;AAED,OAAG,0BAAE,aAAW,EAAE,EAAE,QAAQ;iGACf,GAAG;;;;;;;;;iCAAI,QAAQ;;;;;;;;AAAf,uBAAG;;2BAAoB,EAAE,CAAC,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAC1C,CAAA;;AAED,UAAM,0BAAE,gBAAW,EAAE,EAAE,QAAQ;iGAClB,GAAG;;;;;;;;;iCAAI,QAAQ;;;;;;;;AAAf,uBAAG;;yBACJ,EAAE,CAAC,GAAG,CAAC;;;;;;2BAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAE7B,CAAA;;AAED,aAAS,0BAAE,mBAAW,EAAE,EAAE,QAAQ;YAC1B,SAAS,uFACJ,GAAG;;;;;AADR,6BAAS,GAAG,IAAI;;;;;iCACJ,QAAQ;;;;;;;;AAAf,uBAAG;;AACR,wBAAI,SAAS,EAAE,SAAS,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;;wBAC9B,SAAS;;;;;;2BAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAEhC,CAAA;;AAED,aAAS,0BAAE,mBAAW,EAAE,EAAE,QAAQ;YAC1B,MAAM,uFACD,GAAG;;;;;AADR,0BAAM,GAAG,IAAI;;;;;iCACD,QAAQ;;;;;;;;AAAf,uBAAG;;yBACJ,MAAM;;;;;qCAAG,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC;;;;;;;;2BAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAGnD,CAAA;CACJ","file":"generators.js","sourcesContent":["export default {\n    chunk: function* (n, iterable) {\n        if (!n || n < 1) n = 1;\n        let currentChunk = [];\n        for (let val of iterable) {\n            if (currentChunk.length < n) currentChunk.push(val);\n            else {\n                yield currentChunk;\n                currentChunk = [];\n            }\n        }\n        yield currentChunk;\n    },\n\n    take: function* (n, iterable) {\n        let x = 0;\n        if (n === 0) return;\n        for (let val of iterable) {\n            yield val;\n            if (n <= ++x) break;\n        }\n    },\n\n    drop: function *(n, iterable) {\n        let x = 0;\n        for (let val of iterable) {\n            if (n <= x++) yield val; \n        }\n    },\n\n    map: function* (fn, iterable) {\n        for (let val of iterable) yield fn(val);\n    },\n\n    filter: function* (fn, iterable) {\n        for (let val of iterable) {\n            if (fn(val)) yield val; \n        }\n    },\n\n    dropWhile: function* (fn, iterable) {\n        let isBlocked = true;\n        for (let val of iterable) {\n            if (isBlocked) isBlocked = fn(val);\n            if (!isBlocked) yield val;\n        }\n    },\n\n    takeWhile: function* (fn, iterable) {\n        let isOpen = true;\n        for (let val of iterable) {\n            if (isOpen) (isOpen = fn(val)) && (yield val);\n            else break;\n        }\n    }\n};"],"sourceRoot":"/source/"}