{"version":3,"sources":["sequences.js"],"names":[],"mappings":";;;;;;;;;;;;;uBAAoB,YAAY;;;;0BACb,cAAc;;IAArB,CAAC;;AAEN,SAAS,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;AAC9B,QAAI,GAAG,GAAG,yBAAY,CAAC,CAAC,OAAO,EAAE,CAAC,UAAC,CAAC;eAAK,CAAC,GAAG,CAAC;KAAA,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7D,QAAI,OAAO,GAAG,KAAK,WAAW,EAAE,OAAO,GAAG,CAAC;AAC3C,WAAO,GAAG,CAAC,SAAS,CAAC,UAAC,CAAC;eAAK,CAAC,GAAG,GAAG;KAAA,CAAC,CAAC;CACxC;;AAEM,SAAS,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE;AAC7B,WAAO,yBAAY,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;CAC5C;;AAEM,SAAS,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE;AAChC,QAAI,GAAG,GAAG,yBAAY,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;;AAE/C,WAAO,GAAG,CAAC;CACd","file":"sequences.js","sourcesContent":["import LazySeq from './lazy-seq';\nimport * as g from './generators';\n\nexport function count(start, end) {\n    let seq = new LazySeq(g.iterate, [(x) => x + 1, start || 0]);\n    if (typeof end === 'undefined') return seq;\n    return seq.takeWhile((x) => x < end);\n}\n\nexport function repeatedly(f, n) {\n    return new LazySeq(g.repeatedly, [f, n]);\n}\n\nexport function iterate(f, initial) {\n    let seq = new LazySeq(g.iterate, [f, initial]);\n\n    return seq;\n}"],"sourceRoot":"/source/"}